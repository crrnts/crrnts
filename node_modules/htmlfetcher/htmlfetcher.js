var REQUEST = require("request");
var ICONV = require('iconv').Iconv;
var UNCOMPRESS = require('compress-buffer').uncompress;

function conv(response, body, callback) {

    if (response == 'NOT_TEXT'|| body == undefined || body == '') {
        callback(response, null);
        return;
    }

    try {
        body = new Buffer(body, 'binary');
        var encoding = response.headers['content-encoding'];
        if (encoding && encoding.toLowerCase().indexOf('gzip') >= 0) {
            body = UNCOMPRESS(body);
        }

        var encoding = '';
        if (response.headers['content-type']) {
            var ct = response.headers['content-type'].match(/charset *= *([^ ]+)/i);
            if (ct) {
                encoding = ct[1].replace(/[ \t\n\u3000]/g, "").toUpperCase();
            }
        }

        var tbody = null;

        if (encoding == '') {
            tbody = body.toString("utf-8");
            var charsetString = tbody.match(/<meta[^>]*?charset[^>]*/gi) || tbody.match(/<\?xml[^>]*?encoding[^>]*\"/gi);
            if (charsetString) {
                encoding = charsetString[0].replace(/[ \t\n\u3000]/g, "").toUpperCase().match(/CHARSET*=*([^ ]+)/)[1].replace(/[\/\\\'\";]/g, "");
            }
        }

        if (encoding == '') {
            if (tbody == null) {
                tbody = body.toString("utf-8");
            }
            process.nextTick(function () {
                callback(response, tbody);
            });
        } else {
            try {
                var iconver = new ICONV(encoding, 'UTF-8//TRANSLIT//IGNORE');
                body = iconver.convert(body).toString();

                process.nextTick(function () {
                    callback(response, body);
                });

            } catch (er) {
                if (tbody == null) {
                    tbody = body.toString("utf-8");
                }

                process.nextTick(function () {
                    callback(response, tbody);
                });
            }
        }


    } catch (e) {
        process.nextTick(function () {
            callback(response, body.toString("utf-8"));
        });

    }
}

function fetch(url, options, callback) {

    if ((!url) || (!callback)) {
        return;
    }

    options = options || {};
    options.retry_times = options.retry_times == undefined ? 0 : options.retry_times;
    options.max_redirects = options.max_redirects == undefined ? 0 : options.max_redirects;
    options.timeout = options.timeout == undefined ? 0 : options.timeout;

    var req_options = {
        encoding: 'binary',
        url: url,
        maxRedirects: options.max_redirects,
        followAllRedirects: true
    };

    if (options.headers != undefined) {
        req_options.headers = options.headers;
    }

    if (options.timeout > 0) {
        req_options.timeout = options.timeout;
    }

    var data = '',
        resp = null;

    REQUEST(req_options).on('response', function (response) {
        resp = response;

        var con_type = response.headers['content-type'];

        if (con_type == undefined || (con_type.toLowerCase().indexOf('text/') < 0)) {
            this.abort();
            resp = 'NOT_TEXT';
            return;
        } else if (response.statusCode >= 400) {

            if ((options.retry_times >= 1) && (response.statusCode >= 404 && response.statusCode != 407 && response.statusCode != 415)) {
                options.retry_times = options.retry_times - 1;
                fetch(url, options, callback);
            } else {
                this.abort();
                data = '';
                return;
            }
        }

    }).on('data', function (chunk) {
        data = data + chunk;
    }).on('end', function () {
        process.nextTick(function () {
            conv(resp, data, callback);
        });

    });

}

exports.fetch = fetch;